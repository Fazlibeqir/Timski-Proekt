# -*- coding: utf-8 -*-
"""common_funcs.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12_Iu6Gfn-wQgKAo5dohSDtlePyHTEfFe
"""
import os
import requests
from PIL import Image
from io import BytesIO
from pygbif import occurrences


def get_gbif_images(scientific_name, limit=100):
    """
    Query GBIF for occurrence records with images for a given species.

    Returns a list of image URLs.
    """
    try:
        data = occurrences.search(
            scientific_name=scientific_name,
            media_type='StillImage',
            has_coordinate=True,
            limit=limit
        )
        image_urls = []
        for record in data.get('results', []):
            media = record.get('media', [])
            for m in media:
                if m.get('type') == 'StillImage' and 'identifier' in m:
                    image_urls.append(m['identifier'])
        return image_urls
    except Exception as e:
        print(f"Error fetching GBIF images for {scientific_name}: {e}")
        return []


def download_image(url, save_path, timeout=10):
    """
    Downloads an image from a URL and saves it to the specified path.

    Returns True if successful, False otherwise.
    """
    try:
        response = requests.get(url, timeout=timeout)
        response.raise_for_status()
        image = Image.open(BytesIO(response.content))
        image.convert("RGB").save(save_path, format="JPEG")
        return True
    except Exception:
        return False

def folder_has_enough_images(folder_path, min_count=5):
    if not os.path.exists(folder_path):
        return False
    valid_images = [f for f in os.listdir(folder_path) if f.lower().endswith(('.png', '.jpg', '.jpeg'))]
    return len(valid_images) >= min_count


def count_images(folder_path):
    """
    Counts the number of image files in a folder.
    """
    return len([
        f for f in os.listdir(folder_path)
        if f.lower().endswith(('.png', '.jpg', '.jpeg'))
    ])
